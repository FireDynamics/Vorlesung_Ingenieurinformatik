{
  "hash": "2e6488ba13c9a9bdf4b1ff2148a2aec6",
  "result": {
    "engine": "jupyter",
    "markdown": "# Best Practices in Matplotlib: Fehler und Verbesserungen\n\nIn diesem Kapitel zeigen wir für häufige Problemstellungen jeweils ein schlechtes und ein verbessertes Beispiel.\n\n## 1. Fehlende Beschriftungen\n### ❌ Schlechtes Beispiel\n\n::: {#7dd78b93 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-2-output-1.png){width=590 height=411}\n:::\n:::\n\n\n### ✅ Besseres Beispiel\n\n::: {#5cb75952 .cell execution_count=2}\n``` {.python .cell-code}\nplt.plot(x, y, label='sin(x)', color='b')\nplt.xlabel('Zeit (s)')\nplt.ylabel('Amplitude')\nplt.title('Sinuskurve')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-3-output-1.png){width=608 height=449}\n:::\n:::\n\n\n## 2. Ungünstige Farbwahl\n### ❌ Schlechtes Beispiel\n\n::: {#c46522a4 .cell execution_count=3}\n``` {.python .cell-code}\nplt.plot(x, y, color='yellow')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-4-output-1.png){width=590 height=411}\n:::\n:::\n\n\n### ✅ Besseres Beispiel\n\n::: {#3ccd0ef5 .cell execution_count=4}\n``` {.python .cell-code}\nplt.plot(x, y, color='darkblue')\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.title('Gute Kontraste für bessere Lesbarkeit')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-5-output-1.png){width=590 height=431}\n:::\n:::\n\n\n## 3. Keine sinnvolle Achsenskalierung\n### ❌ Schlechtes Beispiel\n\n::: {#54d367fb .cell execution_count=5}\n``` {.python .cell-code}\nplt.plot(x, y)\nplt.ylim(0.5, 1)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-6-output-1.png){width=571 height=416}\n:::\n:::\n\n\n### ✅ Besseres Beispiel\n\n::: {#a4bbd4d6 .cell execution_count=6}\n``` {.python .cell-code}\nplt.plot(x, y)\nplt.ylim(-1.2, 1.2)\nplt.xlim(0, 10)\nplt.grid(True)\nplt.title('Sinnvolle Achsenskalierung')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-7-output-1.png){width=590 height=431}\n:::\n:::\n\n\n## 4. Überladung durch zu viele Linien\n### ❌ Schlechtes Beispiel\n\n::: {#f33e53e0 .cell execution_count=7}\n``` {.python .cell-code}\nfor i in range(10):\n    plt.plot(x, np.sin(x + i * 0.2))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-8-output-1.png){width=590 height=411}\n:::\n:::\n\n\n### ✅ Besseres Beispiel\n\n::: {#19c801b3 .cell execution_count=8}\n``` {.python .cell-code}\nplt.plot(x, np.sin(x), label='sin(x)')\nplt.plot(x, np.cos(x), label='cos(x)')\nplt.legend()\nplt.title('Weniger ist mehr: Reduzierte Informationsdichte')\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-9-output-1.png){width=590 height=431}\n:::\n:::\n\n\n## Fazit\nGute Plots zeichnen sich durch klare Beschriftungen, gute Lesbarkeit und eine sinnvolle Informationsdichte aus.\n\n",
    "supporting": [
      "scientific_plotting_files"
    ],
    "filters": [],
    "includes": {}
  }
}