{
  "hash": "449137e9216eeeff6cd688379dafc829",
  "result": {
    "engine": "jupyter",
    "markdown": "# Algorithmische Umrechnung von Zahlen: Dezimal ↔ Binär\n\nIn diesem Kapitel betrachten wir die Umrechnung zwischen Dezimal- und Binärzahlen **algorithmisch**. Dabei analysieren wir den Ablauf der Rechenschritte, beschreiben sie als **Pseudocode**, visualisieren sie mit **Flussdiagrammen** und setzen sie anschließend **manuell in Python um**.\n\n## 1. Umrechnung: Dezimal → Binär\n\n### Grundidee\n\nWir wiederholen die ganzzahlige Division durch 2 und merken uns den Rest. Die **Binärziffern** ergeben sich aus den **Resten** — von unten nach oben gelesen.\n\n### Flussdiagramm\n\n![Umrechnug von Dezimal zu Binär](00-bilder/dtb.svg)\n\n### Pseudocode\n\n```\nEingabe: Dezimalzahl n\nInitialisiere leere Liste ziffern\nSolange n > 0:\n    rest ← n mod 2\n    ziffern an rest anhängen\n    n ← n ganzzahlig geteilt durch 2\nAusgabe: ziffern in umgekehrter Reihenfolge\n```\n\n### Python-Implementierung\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef dezimal_zu_binaer(n):\n    ziffern = []\n    while n > 0:\n        ziffern.append(n % 2)\n        n //= 2\n    return ziffern[::-1]\n\ndezimal_zu_binaer(23)  # Beispiel: 23 → 10111\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n[1, 0, 1, 1, 1]\n```\n:::\n:::\n\n\n## 2. Umrechnung: Binär → Dezimal\n\n### Grundidee\n\nJede Stelle repräsentiert eine Zweierpotenz. Wir addieren die Produkte der Ziffern mit ihrer Potenz.\n\n### Flussdiagramm\n\n![Umrechnug von  Binär zu Dezimal](00-bilder/btd.svg)\n\n### Pseudocode\n\n```\nEingabe: Liste binärer Ziffern (z. B. [1, 0, 1, 1])\nInitialisiere dezimalwert ← 0\nFür jede Stelle i von rechts nach links:\n    dezimalwert ← dezimalwert + ziffer * 2^position\nAusgabe: dezimalwert\n```\n\n### Python-Implementierung\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef binaer_zu_dezimal(ziffern):\n    dezimalwert = 0\n    for i in range(len(ziffern)):\n        potenz = len(ziffern) - i - 1\n        dezimalwert += ziffern[i] * (2 ** potenz)\n    return dezimalwert\n\nbinaer_zu_dezimal([1, 0, 1, 1])  # Ergebnis: 11\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n11\n```\n:::\n:::\n\n\n## 3. Mathematische Komplexität\n\nBeide Algorithmen haben eine **logarithmische Laufzeit** bezogen auf die Eingabegröße $n$, denn:\n\n- Die Umrechnung Dezimal → Binär wiederholt die Division durch 2, bis $n = 0$. Das sind $\\log_2(n)$ Schritte.\n- Die Umrechnung Binär → Dezimal summiert über $\\log_2(n)$ Stellen.\n\nDaher gehören beide zur Klasse der **logarithmischen Algorithmen**.\n\n::: {.callout-note title=\"Hinweis\"}\nDiese Verfahren sind nicht nur theoretisch interessant – genau so arbeiten Computer intern mit Bitfolgen!\n:::\n\n",
    "supporting": [
      "umrechnung_binaer_files/figure-pdf"
    ],
    "filters": []
  }
}