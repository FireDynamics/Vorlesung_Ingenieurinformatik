{
  "hash": "1151f5965ac732aeae1aad0b889ca790",
  "result": {
    "engine": "jupyter",
    "markdown": "# Sortieralgorithmen\n\nSortieralgoritmen werden genutzt um Listen von Werten der Größe nach zu sortieren. Anwendung finden diese Algorithmen bei Datenbanken oder Suchvorgängen. Insbesondere bei langen Listen mit Millionen oder Milliarden Einträgen ist es wichtig, dass der Algorithmus mit möglichst wenigen Operationen pro Element auskommt. Diese, als Komplexität bezeichnete Eigenschaft, wird im nächsten Kapitel genauer erläutert. \n\nZunächst werden zwei einfache Sortieralgorithmen \n\n* [Selectionsort](https://de.wikipedia.org/wiki/Selectionsort)\n* [Bubblesort](https://de.wikipedia.org/wiki/Bubblesort)\n\nvorgestellt. Diese werden in der Praxis kaum noch eingesetzt, da es eine Vielzahl anderer [Sortierverfahren](https://de.wikipedia.org/wiki/Sortierverfahren) gibt, welche effektiver arbeiten. Jedoch eignen sich diese beiden besonders gut, um die Grundideen zu verdeutlichen. \n\n## Selectionsort\n\nFolgende Grundidee liegt dem Selectionsort zugrunde: Es wird der minimale Wert der Liste gesucht, dann der zweit-kleinste und so weiter bis die ganze Liste sortiert ist. Dies kann als Abfolge dieser Schritte für eine Liste mit $\\mathsf n$ Elementen formalisiert werden.\n\n1. Wiederhole die Schritte 2 bis 4 $\\mathsf n$ Mal. Setzte die Hilfsvariable $i$ initial auf Null.\n1. Suche den minimalen Wert der Liste ab dem $\\mathsf i$-ten Element.\n1. Tausche dieses Element mit dem $\\mathsf i$-ten Element.\n1. Erhöhe den Wert von $\\mathsf i$ um Eins.\n1. Die Vertauschungen der Elemente haben zu einer sortierten Liste geführt.\n\nDer Selectionsort kann auch als folgendes Flussdiagramm dargestellt werden.\n\n![Flussdiagramm des Selectionsort](00-bilder/alg_selsort.svg)\n\nAls Zahlenbeispiel wird die Liste mit den Elementen 42, 6, 22, 11, 54, 12, 31 mit dem Selectionsort sortiert.\n\n::: {.cell quarto-private-1='{\"key\":\"jupyter\",\"value\":{\"source_hidden\":true}}' tags='[\"remove_input\",\"full-width\"]' execution_count=1}\n``` {.python .cell-code}\nA = [42, 6, 22, 11, 54, 12, 31]\n\nprint('Zu sortierende Werteliste ', A)\nprint()\n\nn = len(A)\nfor i in range(n):\n    mv = A[i]\n    mi = i\n    for j in range(i, n):\n        if A[j] < mv:\n            mv = A[j]\n            mi = j\n\n    print(\"Iteration {:2d}: \".format(i+1))\n    print(\"   Minimum von \", A[i:n], \"ist\", mv)\n    A[mi] = A[i]\n    A[i] = mv\n    print(\"   Sortiert / Unsortiert: \", A[:i+1], \"/\", A[i+1:])\n    print()\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nZu sortierende Werteliste  [42, 6, 22, 11, 54, 12, 31]\n\nIteration  1: \n   Minimum von  [42, 6, 22, 11, 54, 12, 31] ist 6\n   Sortiert / Unsortiert:  [6] / [42, 22, 11, 54, 12, 31]\n\nIteration  2: \n   Minimum von  [42, 22, 11, 54, 12, 31] ist 11\n   Sortiert / Unsortiert:  [6, 11] / [22, 42, 54, 12, 31]\n\nIteration  3: \n   Minimum von  [22, 42, 54, 12, 31] ist 12\n   Sortiert / Unsortiert:  [6, 11, 12] / [42, 54, 22, 31]\n\nIteration  4: \n   Minimum von  [42, 54, 22, 31] ist 22\n   Sortiert / Unsortiert:  [6, 11, 12, 22] / [54, 42, 31]\n\nIteration  5: \n   Minimum von  [54, 42, 31] ist 31\n   Sortiert / Unsortiert:  [6, 11, 12, 22, 31] / [42, 54]\n\nIteration  6: \n   Minimum von  [42, 54] ist 42\n   Sortiert / Unsortiert:  [6, 11, 12, 22, 31, 42] / [54]\n\nIteration  7: \n   Minimum von  [54] ist 54\n   Sortiert / Unsortiert:  [6, 11, 12, 22, 31, 42, 54] / []\n\n```\n:::\n:::\n\n\n## Bubblesort\n\nIm Gegensatz zum Selectionsort beruht die Idee des Bubblesort auf rein lokalen Operationen. D.h. hier wird nicht nach den maximalen Werten gesucht, sondern durch Vertauschungen eine Sortierung erzielt. Das Verfahren für eine Liste mit $\\mathsf n$ Elementen ist durch folgende Vorschrift gegeben.\n\n1. Die Schritte 2 bis 4 werden $\\mathsf n$ Mal durchgeführt. Die Hilfsvariable $\\mathsf i$ wird initial auf Null gesetzt.\n1. Starte beim $\\mathsf i$-ten Element und iteriere bis zum Ende der Liste. Falls das aktuell betrachtete Element größer ist als das Folgende, tausche beide Elemente.\n1. Falls in Schritt 2 keine Vertauschungen durchgeführt wurden, gehe zu Schritt 5.\n1. Addiere Eins zum Wert der Variable $\\mathsf i$.\n1. Die Liste ist sortiert und der Algorithmus ist fertig.\n\nDas nachfolgende Flussdiagramm verdeutlicht den Ablauf des Bubblesort Algorithmus. \nBevor Sie sich das Diagram anschauen, versuchen Sie es einmal selbst zu erstellen.\n\n::: {.callout-caution icon=\"true\" collapse=\"true\"}\n\n## Flussdiagramm: Bubblesort\n![Flussdiagramm des Bubblesort](00-bilder/alg_bubblesort.svg)\n\n:::\n\nDer Ablauf des Bubblesort wird beispielhaft für die Liste 42, 6, 22, 11, 54, 12, 31 (gleich der im obigen Beispiel) vorgeführt.\n\n::: {.cell quarto-private-1='{\"key\":\"jupyter\",\"value\":{\"source_hidden\":true}}' tags='[\"remove_input\"]' execution_count=2}\n``` {.python .cell-code}\nA = [42, 6, 22, 11, 54, 12, 31]\n\nprint('Zu sortierende Werteliste ', A)\nprint()\n\nn = len(A)\nswapped = True\ni = 0\nwhile swapped:\n    swapped = False\n    print(\"Iteration {:2d}: \".format(len(A) - n + 1))\n    print(\"   Liste zu Beginn der Iteration: \", A)\n    for j in range(n-1):\n        if A[j+1] < A[j]:\n            print(\"   Tausche: \", A[j], \"und\", A[j+1])\n            mv = A[j]\n            A[j] = A[j+1]\n            A[j+1] = mv\n            print(\"   Liste nach Tausch: \", A)\n            swapped = True\n        else:\n            print(\"   Elemente \", A[j], \"und\", A[j+1], \" müssen nicht getauscht werden\")\n    n -= 1\n    if not swapped:\n        print(\"   kein Tausch mehr notwendig, Liste ist nun sortiert\")\n    print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nZu sortierende Werteliste  [42, 6, 22, 11, 54, 12, 31]\n\nIteration  1: \n   Liste zu Beginn der Iteration:  [42, 6, 22, 11, 54, 12, 31]\n   Tausche:  42 und 6\n   Liste nach Tausch:  [6, 42, 22, 11, 54, 12, 31]\n   Tausche:  42 und 22\n   Liste nach Tausch:  [6, 22, 42, 11, 54, 12, 31]\n   Tausche:  42 und 11\n   Liste nach Tausch:  [6, 22, 11, 42, 54, 12, 31]\n   Elemente  42 und 54  müssen nicht getauscht werden\n   Tausche:  54 und 12\n   Liste nach Tausch:  [6, 22, 11, 42, 12, 54, 31]\n   Tausche:  54 und 31\n   Liste nach Tausch:  [6, 22, 11, 42, 12, 31, 54]\n\nIteration  2: \n   Liste zu Beginn der Iteration:  [6, 22, 11, 42, 12, 31, 54]\n   Elemente  6 und 22  müssen nicht getauscht werden\n   Tausche:  22 und 11\n   Liste nach Tausch:  [6, 11, 22, 42, 12, 31, 54]\n   Elemente  22 und 42  müssen nicht getauscht werden\n   Tausche:  42 und 12\n   Liste nach Tausch:  [6, 11, 22, 12, 42, 31, 54]\n   Tausche:  42 und 31\n   Liste nach Tausch:  [6, 11, 22, 12, 31, 42, 54]\n\nIteration  3: \n   Liste zu Beginn der Iteration:  [6, 11, 22, 12, 31, 42, 54]\n   Elemente  6 und 11  müssen nicht getauscht werden\n   Elemente  11 und 22  müssen nicht getauscht werden\n   Tausche:  22 und 12\n   Liste nach Tausch:  [6, 11, 12, 22, 31, 42, 54]\n   Elemente  22 und 31  müssen nicht getauscht werden\n\nIteration  4: \n   Liste zu Beginn der Iteration:  [6, 11, 12, 22, 31, 42, 54]\n   Elemente  6 und 11  müssen nicht getauscht werden\n   Elemente  11 und 12  müssen nicht getauscht werden\n   Elemente  12 und 22  müssen nicht getauscht werden\n   kein Tausch mehr notwendig, Liste ist nun sortiert\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "sortieralgorithmen_files/figure-pdf"
    ],
    "filters": []
  }
}