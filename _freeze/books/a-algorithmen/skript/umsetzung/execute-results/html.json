{
  "hash": "a7eb068a57911637779c97e59bd51292",
  "result": {
    "engine": "jupyter",
    "markdown": "# Von der Idee zum Code\n\nEin einfacher Algorithmus zur Bestimmung des maximalen Werts einer beliebig großen Menge von Zahlen ist wie folgt definiert: \n\n1. Eingabe: Menge $\\mathsf A$ von $\\mathsf n$ Zahlen, hier durchnumerierte Werteliste $\\mathsf A=A_0, \\dots, A_{n-1}$.\n1. Setzte Hilfswert (Variable) $\\mathsf m$ auf das erste Element der Liste, d.h. $\\mathsf m = A_0$.\n1. Gehe alle Elemente von $\\mathsf A$ durch, wobei das aktuelle Element als $\\mathsf a$ bezeichnet wird:\n  1. Falls das aktuelle Element $\\mathsf a$ größer ist als $\\mathsf m$:\n    * setzte $\\mathsf m = a$\n    *, dann mache weiter mit dem nächsten Element in Schritt 3\n  1. Falls nicht:\n    mache weiter mit dem nächsten Element in Schritt 3\n1. Nachdem alle Elemente aus $\\mathsf A$ in Schritt 3 durchlaufen wurden, enthält $\\mathsf m$ den maximalen Wert der Liste $\\mathsf A$.\n\nDieser Algorithmus mag Ihnen auf den ersten Blick kompliziert. Gehen wir nochmal einen Schritt zurück und schauen uns einen Algorithmus an den wir bereits kennengelernt haben: Prüfen ob eine Zahl gerade ist.\n\n1. Eingabe: Eine Zahl X\n1. Berechne $X\\text{ mod }2$\n1. Prüfe ob das Ergebnis gleich Null ist\n  1. Falls ja ist die Zahl gerade und wir geben den Text \"die Zahl ist gerade\" aus.\n  1. Falls nein ist die Zahl ungerade und wir geben den Text \"die Zahl ist ungerade\" aus.\n\nDiesen Auflistung können wir uns besser visualisieren. Dazu benutzen wir sogenannte Flussdiagramme.\n\n::: {.callout-note collapse=\"false\"}\n## Flussdiagramme - Visuelle Darstellung von Abläufen\n\nEin **Flussdiagramm** (engl. *flowchart*) ist eine grafische Methode zur Darstellung von Algorithmen. Es zeigt den Ablauf eines Programms oder Prozesses durch standardisierte Symbole und Pfeile. So lassen sich komplexe Abläufe leicht nachvollziehen und logisch überprüfen.\n\n**Typische Symbole:**\n\n- **Prozess (Anweisung)**: Rechteck – z. B. „Berechne Fläche“\n- **Entscheidung**: Raute – z. B. \"Ist x > 0?\"\n- **Start/Ende**: Ellipse – z. B. \"für alle a in A\"\n- **Pfeile**: Zeigen den Ablauf von einem Schritt zum nächsten\n\n**Beispiel:**\nDer Algorithmus zur Bestimmung, ob eine Zahl gerade ist:\n\n![Flussdiagramm](00-bilder/Zahl_gerade.svg)\n\n:::\n\nFlussdiagramme sind nicht der einzige Weg, um komplexere Algorithmen verständlicher aufzuschreiben. Eine weitere Möglichkeit bieter hier sogenannter Pseudocode:\n\n::: {.callout-note collapse=\"false\"}\n## Pseudocode – Vom Gedanken zum Programm\n\n**Pseudocode** ist eine formalisierte Beschreibung eines Algorithmus in einfacher, strukturierter Sprache – eine Mischung aus natürlicher Sprache und Programmierlogik. Er ist **sprachunabhängig** und dient zur Planung, nicht zur direkten Ausführung.\n\n**Typische Merkmale:**\n- Klare **Schritt-für-Schritt-Struktur**\n- Verwendung von **Kontrollstrukturen** wie `wenn`, `solange`, `wiederhole`\n- Keine konkrete Syntax einer Programmiersprache\n\n**Beispiel:**\n```pseudocode\nBEGIN\n  Lese Zahl x ein\n  WENN x mod 2 = 0 DANN\n    Gib \"x ist gerade\" aus\n  SONST\n    Gib \"x ist ungerade\" aus\nENDE\n```\n:::\n\nKommen wir nun zu dem \"komplexeren Algorithmus zurück, der das Maximum in einer Liste von Zahlen finden soll:\n\n1. Eingabe: Menge $\\mathsf A$ von $\\mathsf n$ Zahlen, hier durchnumerierte Werteliste $\\mathsf A=A_0, \\dots, A_{n-1}$.\n1. Setzte Hilfswert (Variable) $\\mathsf m$ auf das erste Element der Liste, d.h. $\\mathsf m = A_0$.\n1. Gehe alle Elemente von $\\mathsf A$ durch, wobei das aktuelle Element als $\\mathsf a$ bezeichnet wird:\n  1. Falls das aktuelle Element $\\mathsf a$ größer ist als $\\mathsf m$:\n    * setzte $\\mathsf m = a$\n    *, dann mache weiter mit dem nächsten Element in Schritt 3\n  1. Falls nicht:\n    mache weiter mit dem nächsten Element in Schritt 3\n1. Nachdem alle Elemente aus $\\mathsf A$ in Schritt 3 durchlaufen wurden, enthält $\\mathsf m$ den maximalen Wert der Liste $\\mathsf A$.\n\nTesten Sie einmal selbst, ob Sie das passende Flussdiagramm erstellen können. In der folgenden Box finden Sie die Musterlösung. Sie brauchen hierfür auch die Verzweigung für Schleifen:\n**Verzweigung** (blau): Abfrage einer Bedingung, welche entscheidet welche folgenden Elemente ausgeführt werden, hier wird geprüft ob $\\mathsf a > m$\n\n::: {.callout-caution icon=\"true\" collapse=\"true\"}\n\n## Flussdiagramm: Maximumsuche\n![Algorithmus zur Bestimmung des Maximums einer Zahlenliste](00-bilder/alg_findmax.svg)\n\n:::\n\n\nWie oben beschrieben, können wir aber nicht nur Flussdiagramme zur Darstellung von Algorithmen nutzen, sondern auch sogenannten Pseudocode. Versuchen Sie einmal selbst den ALgorithmus zur Maximumsuche in Pseudocode zu formulieren.\n\n::: {.callout-caution icon=\"true\" collapse=\"true\"}\n\n## Pseudocode: Maximumsuche\n\n\n\n\n\n\n\n```{bash}\nEingabe: Liste von Zahlen L (z. B. L = [5, 8, 2, 9, 3])\n\n1. Setze max_wert := L[0]        // Initialisiere Hilfswert mit dem ersten Element der Liste\n\n2. Für jedes Element x in L:\n    a. Falls x > max_wert:\n        i. Setze max_wert := x\n    b. Andernfalls:\n        i. Tue nichts (fortfahren)\n\n3. Ausgabe: max_wert             // max_wert enthält nun den größten Wert der Liste\n```\n\n\n\n\n\n\n\n:::\n\n\n\nEin Beispiel für den Ablauf des Algoritmus für eine Liste von 20 Zahlen ist:\n\n::: {#bcb34ce4 .cell tags='[\"remove_input\"]' execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nnp.set_printoptions(linewidth=50)\n# A = np.random.randint(0, high=1000, size=20)\nA = np.array([203, 433, 504, 602, 567, 762, 183, 482, 471, 741, 854, 486, 350, 550, 885, 395, 203, 288, 909, 644])\n\nprint('Schritt 1:')\nprint('==========')\nprint('A =', np.array2string(A, separator=', '))\n\nprint()\nprint('Schritt 2:')\nprint('==========')\nm = A[0]\nprint('m = A[0] =', m)\n\nprint()\nprint('Schritt 3:')\nprint('==========')\nfor a in A:\n    print('a = {:3d}, m = {:3d}'.format(a, m), end='')\n    if a > m:\n        m = a\n        print(', da a > m ist, setzte m auf m=', m)\n    else:\n        print()\n\nprint()\nprint('Schritt 4:')\nprint('==========')\nprint('Maximaler Wert in A: m =', m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSchritt 1:\n==========\nA = [203, 433, 504, 602, 567, 762, 183, 482, 471, 741,\n 854, 486, 350, 550, 885, 395, 203, 288, 909, 644]\n\nSchritt 2:\n==========\nm = A[0] = 203\n\nSchritt 3:\n==========\na = 203, m = 203\na = 433, m = 203, da a > m ist, setzte m auf m= 433\na = 504, m = 433, da a > m ist, setzte m auf m= 504\na = 602, m = 504, da a > m ist, setzte m auf m= 602\na = 567, m = 602\na = 762, m = 602, da a > m ist, setzte m auf m= 762\na = 183, m = 762\na = 482, m = 762\na = 471, m = 762\na = 741, m = 762\na = 854, m = 762, da a > m ist, setzte m auf m= 854\na = 486, m = 854\na = 350, m = 854\na = 550, m = 854\na = 885, m = 854, da a > m ist, setzte m auf m= 885\na = 395, m = 885\na = 203, m = 885\na = 288, m = 885\na = 909, m = 885, da a > m ist, setzte m auf m= 909\na = 644, m = 909\n\nSchritt 4:\n==========\nMaximaler Wert in A: m = 909\n```\n:::\n:::\n\n\n## Kapitelübersicht \n\nIn diesem Kapitel werden folgende Themen behandelt:\n\n* Sortieralgorithmen\n* Eigenschaften von Algorithmen\n* Numerische Algorithmen\n\n",
    "supporting": [
      "umsetzung_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}