{
  "hash": "9767478fd356eeed65a3e91275bffc15",
  "result": {
    "engine": "jupyter",
    "markdown": "# Datenanalyse und Modellierung\n\n## Einleitung\n\nIn dieser Einheit lernen Sie, wie man reale Messdaten – etwa aus Experimenten \noder Ingenieurprojekten – mit NumPy und Matplotlib verarbeitet und analysiert. \nDer Fokus liegt dabei auf einem praxisnahen Umgang mit Daten im CSV-Format.\n\n## Lernziele dieses Kapitels\n\nSie lernen in dieser Einheit:\n\n- wie Sie strukturierte CSV-Daten in NumPy-Arrays überführen,\n- wie Sie fehlende Werte erkennen und ersetzen,\n- wie Sie typische statistische Kennzahlen berechnen,\n- wie Sie Daten mit Matplotlib visualisieren,\n- wie Sie Daten interpolieren und Trends glätten,\n- und wie Sie reale Anwendungen – z. B. aus dem Bauwesen – analysieren.\n\n\n## CSV-Dateien: Ein typisches Format für Messdaten\n\nCSV-Dateien („Comma Separated Values“) sind weit verbreitet – etwa für:\n\n- Temperaturverläufe,\n- Messreihen aus Experimenten,\n- Logdaten von Sensoren.\n\nZu Beginn wird ein Beispiel betrachtet: Temperatur, Luftfeuchtigkeit und CO₂-Werte. \nDiese Datei enthält auch einige **fehlende Werte**, wie sie in realen Daten oft vorkommen.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\ndata = np.genfromtxt(\"beispiel.csv\", delimiter=\",\", skip_header=1)\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 21.1  45.  400. ]\n [ 22.5   nan 420. ]\n [  nan  50.  410. ]\n [ 20.   48.    nan]\n [ 23.3  47.  430. ]]\n```\n:::\n:::\n\n\n## Fehlende Werte erkennen und bereinigen\n\nFehlende Werte werden beim Einlesen als `np.nan` (Not a Number) codiert. Zunächst wird gezählt, wie viele Werte fehlen:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(np.isnan(data).sum(axis=0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 1 1]\n```\n:::\n:::\n\n\nUm die Analyse nicht zu verfälschen, werden sie ersetzt – z. B. durch den Mittelwert der Spalte:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfor i in range(data.shape[1]):\n    mean = np.nanmean(data[:, i])\n    data[:, i] = np.where(np.isnan(data[:, i]), mean, data[:, i])\n```\n:::\n\n\n## Statistische Kennzahlen berechnen\n\nTypische Kennwerte zur Beschreibung von Daten:\n\n- **Mittelwert**: Durchschnitt\n- **Standardabweichung**: Streuung\n- **Minimum und Maximum**\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint(\"Mittelwerte:\", np.mean(data, axis=0))\nprint(\"Standardabweichung:\", np.std(data, axis=0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMittelwerte: [ 21.725  47.5   415.   ]\nStandardabweichung: [ 1.13556154  1.61245155 10.        ]\n```\n:::\n:::\n\n\n## Daten visualisieren\n\nMit Matplotlib lassen sich Daten übersichtlich darstellen. Es werden z. B. Linien- und Histogrammplots genutzt.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nlabels = [\"Temperatur (°C)\", \"Luftfeuchtigkeit (%)\", \"CO₂ (ppm)\"]\n\nfor i in range(data.shape[1]):\n    plt.plot(data[:, i], label=labels[i])\nplt.legend()\nplt.title(\"Messwerte im Verlauf\")\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](introduction_files/figure-pdf/cell-6-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n",
    "supporting": [
      "introduction_files/figure-pdf"
    ],
    "filters": []
  }
}