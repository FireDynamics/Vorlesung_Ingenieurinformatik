{
  "hash": "2803175d9209a7f0cb29ea2ff24092f5",
  "result": {
    "engine": "jupyter",
    "markdown": "# Interpolation – Lücken schließen\n\n\n\nWas tun, wenn Werte fehlen? In vielen Datensätzen gibt es Lücken – zum Beispiel, \nweil Messungen nur an bestimmten Punkten vorgenommen wurden. Interpolation ist \neine Methode, mit der wir Zwischenwerte schätzen können, also Werte innerhalb \neines bekannten Wertebereichs.\n\nIm Gegensatz dazu versucht Extrapolation, Werte außerhalb des bekannten Bereichs \nvorherzusagen – was in der Regel mit größerer Unsicherheit verbunden ist.\n\nBei der Interpolation wird eine Modellfunktion gesucht, welche die Messdaten \nexakt abbildet.\n\n::: {.callout-note collapse=\"true\"}\n## Theorie - Modellierung\nDie Modellierung von Daten hat das Ziel eine Menge von Daten durch einen funktionalen Zusammenhang abzubilden. Beispielhaft können Daten aus Experimenten oder Simulationen stark verrauscht und so für eine Weiterverarbeitung nicht geeignet sein. Eine mittelnde Funktion kann den Datensatz stark vereinfachen. Oder es existieren nur wenige Datenpunkte und die Zwischenstellen müssen durch eine Funktion bestimmt werden.   \n\nGenerell kann die Modellierung von Daten auf folgendes Problem verallgemeinert werden:\n\n1. Gegeben sind $n$ Messpunktpaare $(x_i, y_i)$ mit $x_i, y_i \\in \\mathbb{R}$\n2. Gesucht ist eine Modellfunktion $y(x)$, welche die Messpunktpaare approximiert\n\nEin möglicher Ansatz ist die Darstellung der Modellfunktion als Summe von $m$ Basisfunktionen $\\phi_i(x)$ mit den Koeffizienten $\\beta_i$. \n\n$$  y(x) = \\sum_{i=1}^{m}\\beta_i \\cdot \\phi_i(x) = \\beta_1\\cdot \\phi_1(x) + \\cdots + \\beta_m\\cdot \\phi_m(x) $$\n\nDie Koeffizienten $\\beta_i$ müssen dabei so bestimmt werden, dass $y(x)$ so gut wie möglich – oder gar exakt – die Messpunkte approximieren. \n\nAls Abstandmaß zwischen einer Modellfunktion und den Messpunkten kann die [L2-Norm](https://de.wikipedia.org/wiki/Folgenraum#lp) verwendet werden. Diese ist definiert als\n\n$$  || y(x) - (x_i, y_i) ||_2 = \\sum_{i=1}^n \\left(y(x_i) - y_i\\right)^2 \\quad .$$\n\nEine solche Norm gibt ein Maß für die Qualität einer Approximation: je kleiner der Abstand, desto besser die Qualität. Dies ermöglicht das Finden optimaler Koeffizienten und  wird beispielsweise in der Methode der kleinsten Quadrate genutzt, in der ein Satz an Koeffizienten gesucht wird, der die L2-Norm minimiert.\n:::\n\n## Übersicht\n\nIn vielen praktischen Anwendungen werden Polynome als Basisfunktionen der Modellfunktion angenommen. Vorteile von Polynomen:\n\n* Polynome sind leicht zu differenzieren und integrieren\n* Annäherung von beliebigen Funktionen durch Polynome möglich, siehe [Taylor-Entwicklung](https://de.wikipedia.org/wiki/Taylorreihe)\n* Auswertung ist sehr einfach und dadurch schnell, d.h. sie benötigt nur wenige schnelle arithmetische Operationen (Addition und Multiplikation)\n\nEin Beispiel für eine Basis aus Polynomen:\n\n$$ \\phi_1(x)=1,\\quad \\phi_2(x)=x,\\quad \\phi_3(x)=x^2,\\quad \\cdots,\\quad \\phi_m =x^{m-1} $$\n\n## Polynome\n\nPolynome $P(x)$ sind Funktionen in Form einer Summe von Potenzfunktionen mit natürlichzahligen Exponenten $( x^i, i \\in \\mathbb{N})$ mit den entsprechenden Koeffzienten $a_i$:\n\n$$ P(x) = \\sum_{i=0}^n a_i x^i = a_n x^n + a_{n-1} x^{n-1} + \\cdots + a_2 x^2 + a_1 x + a_0, \\quad i, n \\in \\mathbb{N}, a_i \\in \\mathbb{R} $$ \n\n* Als Grad eines Polynoms wird der Term mit dem höchsten Exponenten und nichtverschwindenden Koeffizienten (der sogenannte Leitkoeffizient) bezeichnet.\n* Ein Polynom mit Grad $n$ hat $n$, teilweise [komplexe](https://de.wikipedia.org/wiki/Komplexe_Zahl), Nullstellen.\n\nIn Python, d.h. im numpy-Modul, werden Polynome durch ihre Koeffizienten representiert. Im Allgemeinen wird ein Polynom mit dem Grad $n$ durch folgendes Array dargestellt\n\n```python\n[an, ..., a2, a1, a0]\n```\n\nSo z.B. für $P(x) = x^3 + 5x^2 - 2x + 3$:\n\n::: {#7542b54a .cell execution_count=2}\n``` {.python .cell-code}\nP = np.array([1, 5, -2, 3])\nprint(P)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 1  5 -2  3]\n```\n:::\n:::\n\n\nDie Auswertung des Polynoms an einem Punkt oder einem Array erfolgt mit der `np.polyval`-Funktion.\n\n::: {#ee24272d .cell execution_count=3}\n``` {.python .cell-code}\nx = 1\ny = np.polyval(P, x)\nprint(f\"P(x={x}) = {y}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nP(x=1) = 7\n```\n:::\n:::\n\n\n::: {#2078404e .cell execution_count=4}\n``` {.python .cell-code}\nx = np.array([-1, 0, 1])\ny = np.polyval(P, x)\nprint(f\"P(x={x}) = {y}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nP(x=[-1  0  1]) = [9 3 7]\n```\n:::\n:::\n\n\nFür die graphische Darstellung im Bereich $x \\in [-6, 2]$ können die bekannten numpy und matplotlib Funktionen verwendet werden.\n\n::: {#3fc797db .cell execution_count=5}\n``` {.python .cell-code}\nx = np.linspace(-6, 2, 50)\ny = np.polyval(P, x)\n\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y(x)')\nplt.grid()\n```\n\n::: {.cell-output .cell-output-display}\n![](interpolation_files/figure-html/cell-6-output-1.png){width=596 height=429}\n:::\n:::\n\n\nUm die Nullstellen eines Polynoms zu finden, kann die numpy-Funktion `np.roots` genutzt werden. Für das obige Polynom können folgende Nullstellen bestimmt werden. \n\n::: {#2112e992 .cell execution_count=6}\n``` {.python .cell-code}\nnstellen = np.roots(P)\n\n# direkte Ausgabe des Arrays\nprint(\"Nullstellen: \")\nprint(nstellen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNullstellen: \n[-5.46628038+0.j        0.23314019+0.703182j  0.23314019-0.703182j]\n```\n:::\n:::\n\n\n::: {#fbf13b2a .cell execution_count=7}\n``` {.python .cell-code}\nprint(\"Nullstellen: \")\n# schönere Ausgabe des Arrays\nfor i, z in enumerate(nstellen):\n    if z.imag == 0:\n        print(f\"  x_{i+1} = {z.real:.2}\")\n    else:\n        print(f\"  x_{i+1} = {z.real:.2} {z.imag:+.2}i\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNullstellen: \n  x_1 = -5.5\n  x_2 = 0.23 +0.7i\n  x_3 = 0.23 -0.7i\n```\n:::\n:::\n\n\nIn diesem Beispiel sind zwei der Nullstellen komplex. Eine komplexe Zahl $z$ wird in Python als Summe des Realteils ($ Re$) und Imaginärteils ($ Im$). Letzterer wird durch ein nachfolgendes `j`, die imaginäre Einheit, gekennzeichnet.\n\n$$ z = Re(z) + Im(z)j$$\n\nDie Nullstellen können auch zur alternativen Darstellung des Polynoms verwendet werden. Sind $x_i$ die $n$ Nullstellen, so ist das Polynom $n$-ten Grades durch folgendes Produkt beschrieben:\n\n$$ P(x) = \\prod_{i=1}^n \\left(x - x_i\\right) = (x - x_1)\\cdot (x - x_2) \\cdot \\cdots \\cdot (x - x_n) $$ \n\nSeien beispielsweise 1 und 2 die Nullstellen eines Polynoms, so lautet dieses:\n\n$$  P(x) = (x - 1)(x - 2) = x^2 - 3x +2 $$\n\nDie numpy-Funktion `np.poly` kann aus den Nullstellen die Polynomkoeffizienten bestimmen. Anhand des obigen Beispiels lautet der Funktionsaufruf: \n\n::: {#eea7bb5b .cell execution_count=8}\n``` {.python .cell-code}\nnstellen = [1, 2]\nkoeffizienten = np.poly(nstellen)\n\nprint(\"Nullstellen:\", nstellen)\nprint(\"Koeffizienten:\", koeffizienten)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNullstellen: [1, 2]\nKoeffizienten: [ 1. -3.  2.]\n```\n:::\n:::\n\n\nDas Modul numpy stellt viele praktische Funktionen zum Umgang mit Polynomen zur Verfügung. So existieren Funktionen um Polynome auszuwerten, die Nullstellen zu finden, zu addieren, zu multiplizieren, abzuleiten oder zu integrieren. Eine Übersicht ist in der [numpy-Dokumentation](https://numpy.org/doc/stable/reference/routines.polynomials.poly1d.html) gegeben.\n\n## Interpolation\n\nInterpolation ist eine Methode, um Datenpunkte zwischen gegebenen Messpunkten zu konstruieren. Dazu wird eine Funktion gesucht, die alle Messpunkte exakt abbildet, was gleichbedeutend damit ist, dass die L2-Norm zwischen Funktion und Punkten Null ist.\n\nZwei Punkte können z.B. mit einer Geraden interpoliert werden. D.h. für zwei Messpunktpaare $(x_1, y_1)$ und $(x_2, y_2)$ mit $x_1\\neq x_2$ existiert ein Koeffizientensatz, sodass die L2-Norm zwischen den Messpunkten und der Modellfunktion\n\n$$y(x) = \\beta_1 x + \\beta_0$$\n\nverschwindet.\n\n::: {#797662d6 .cell tags='[\"hide_input\"]' execution_count=9}\n``` {.python .cell-code}\n# Beispieldaten aus y(x) = -x + 2\n\nN = 50\ndx = 0.25\n\ndef fnk(x):\n    return -x + 2\n\nx = np.array([1, 2])\ny = fnk(x)\n\nplt.scatter(x, y, color='C1', label=\"Messpunkte\", zorder=3)\n\nx_modell = np.linspace(np.min(x), np.max(x), N)\nplt.plot(x_modell, fnk(x_modell), color='C0', label=\"Modellfunktion\")\n\nx_linie = np.linspace(np.min(x)-dx, np.max(x)+dx, N)\nplt.plot(x_linie, fnk(x_linie), '--', alpha=0.3, color='C0')\n\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.legend()\nplt.grid()\n```\n\n::: {.cell-output .cell-output-display}\n![](interpolation_files/figure-html/cell-10-output-1.png){width=600 height=429}\n:::\n:::\n\n\nFür drei Messpunkte muss ein Polynom zweiten Grades verwendet werden, um die Punkte exakt zu erfassen.\n\n$$y(x) = \\beta_2 x^2 + \\beta_1 x + \\beta_0$$\n\n::: {#02fdd023 .cell tags='[\"hide_input\"]' execution_count=10}\n``` {.python .cell-code}\n# Beispieldaten aus y(x) = 3x^2 -4x - 1\n\nN = 50\ndx = 0.25\n\ndef fnk(x):\n    return 3*x**2-4*x - 1\n\nx = np.array([-1, 2, 3])\ny = fnk(x)\n\nplt.scatter(x, y, color='C1', label=\"Messpunkte\", zorder=3)\n\nx_modell = np.linspace(np.min(x), np.max(x), N)\nplt.plot(x_modell, fnk(x_modell), color='C0', label=\"Modellfunktion\")\n\nx_linie = np.linspace(np.min(x)-dx, np.max(x)+dx, N)\nplt.plot(x_linie, fnk(x_linie), '--', alpha=0.3, color='C0')\n\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.legend()\nplt.grid()\n```\n\n::: {.cell-output .cell-output-display}\n![](interpolation_files/figure-html/cell-11-output-1.png){width=600 height=429}\n:::\n:::\n\n\nDies kann verallgemeinert werden: $n$ Messpunkte können exakt mit einem Polynom ($ n-1$)-ten Grades abgebildet werden. Die Suche nach den passenden Koeffizienten ist das Lagrangesche Interpolationsproblem. Für das gesuchte Polynom $P(x)$ gilt:\n\n$$  P(x_i) = y_i \\quad i \\in 1, \\dots, n $$\n\nDie Existenz und Eindeutigkeit eines solchen Polynoms kann gezeigt werden. Das gesuchte Polynom lautet: \n\n$$  P(x) = \\sum_{i=1}^n y_i I_i(x) $$\n$$  \\text{mit}\\quad I_i(x) = \\prod_{j=1, i\\neq j}^n \\frac{x-x_j}{x_i - x_j} $$\n\nAlternativ kann auch ein Gleichungssystem, welches durch die Polynomialbasis $\\phi_i(x)$ gegeben ist, gelöst werden. Für die $n$ Punktepaare gilt jeweils:\n\n$$  y(x_i) = \\sum_{i=1}^{m}\\beta_i \\cdot \\phi_i(x_i) = \\beta_1\\cdot \\phi_1(x_i) + \\cdots + \\beta_m\\cdot \\phi_m(x_i) = y_i $$\n\nDas allgemeine Geleichungssystem lautet\n\n$$  \\left( \\begin{matrix} \\phi_1(x_1) & \\phi_2(x_1) & \\cdots & \\phi_m(x_1) \\\\ \n             \\phi_1(x_2) & \\phi_2(x_2) & \\cdots & \\phi_m(x_2) \\\\ \n             \\vdots &\\vdots & \\ddots & \\vdots \\\\ \n             \\phi_1(x_n) & \\phi_2(x_n) & \\cdots & \\phi_m(x_n) \\\\ \n             \\end{matrix}\\right). \n\\left(  \\begin{matrix} \\beta_1 \\\\  \n      \\beta_2 \\\\   \\vdots \\\\   \\beta_m \\\\ \n      \\end{matrix} \\right) \n= \\left(  \\begin{matrix} y_1 \\\\  y_2 \\\\   \\vdots \\\\   y_n \\\\ \\end{matrix} \\right) $$\n\nund mit der Polynomialbasis\n\n$$ \\underbrace{\\left( \\begin{matrix} 1 & x_1 & \\cdots & x_1^{n-1} \\\\ 1 & x_2 & \\cdots & x_2^{n-1} \\\\ \\vdots &\\vdots & \\ddots & \\vdots \\\\ 1 & x_n & \\cdots & x_n^{n-1} \\\\ \\end{matrix}\\right)}_{V}. \\left(  \\begin{matrix} \\beta_1 \\\\  \\beta_2 \\\\   \\vdots \\\\   \\beta_m \\\\ \\end{matrix} \\right) = \\left(  \\begin{matrix} y_1 \\\\  y_2 \\\\   \\vdots \\\\   y_n \\\\ \\end{matrix} \\right)$$\n\nDie Matrix $V$ heisst [Vandermonde-Matrix](https://de.wikipedia.org/wiki/Vandermonde-Matrix) und kann exakt gelöst werden, für $m=n$ und wenn für alle $i, j, i\\neq j$ gilt $x_i \\neq x_j$. \n\nIn Python kann das Interpolationsproblem mit der [Funktion `np.polyfit`](https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html) gelöst werden. Das folgende Beispiel demonstriert deren Anwendung.\n\nDie Messtellen folgen in dem Beispiel der Funktion $f(x)$, welche nur zur Generierung der Datenpunkte verwendet wird. \n\n$$ f(x) = \\frac{1}{2} + \\frac{1}{1+x^2}$$\n\nZunächst werden die Messpunkte generiert.\n\n::: {#05fe9fbe .cell execution_count=11}\n``` {.python .cell-code}\ndef fnk(x):\n    return 0.5 + 1/(1+x**2)\n```\n:::\n\n\n::: {#0df5d9aa .cell execution_count=12}\n``` {.python .cell-code}\nxmin = -5\nxmax =  5\nx = np.linspace(xmin, xmax, 100)\ny = fnk(x)\n```\n:::\n\n\n::: {#a1fc8557 .cell execution_count=13}\n``` {.python .cell-code}\nn = 5\nxi = np.linspace(xmin, xmax, n)\nyi = fnk(xi)\n```\n:::\n\n\nNun folgt die Interpolation für 5 und 15 Messpunkte.\n\n::: {#6e2cc854 .cell execution_count=14}\n``` {.python .cell-code}\nP = np.polyfit(xi, yi, n-1)\nprint(\"Interpolationskoeffizienten:\")\nprint(P)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInterpolationskoeffizienten:\n[ 5.30503979e-03  4.23767299e-17 -1.71087533e-01  7.45353051e-16\n  1.50000000e+00]\n```\n:::\n:::\n\n\n::: {#c917f385 .cell execution_count=15}\n``` {.python .cell-code}\nplt.plot(x, y, color='C0', alpha=0.5, label='generierende Funktion')\nplt.plot(x, np.polyval(P, x), color='C2', label='Interpolation')\nplt.scatter(xi, yi, color='C1', label='Messpunkte', zorder=3)\nplt.legend()\nplt.grid()\n```\n\n::: {.cell-output .cell-output-display}\n![](interpolation_files/figure-html/cell-16-output-1.png){width=571 height=411}\n:::\n:::\n\n\n::: {#a9cf84b2 .cell execution_count=16}\n``` {.python .cell-code}\nn = 15\nxi = np.linspace(xmin, xmax, n)\nyi = fnk(xi)\n\nP = np.polyfit(xi, yi, n-1)\n\nplt.plot(x, y, color='C0', alpha=0.5, label='generierende Funktion')\nplt.plot(x, np.polyval(P, x), color='C2', label='Interpolation')\nplt.scatter(xi, yi, color='C1', label='Messpunkte', zorder=3)\nplt.legend()\nplt.grid()\n```\n\n::: {.cell-output .cell-output-display}\n![](interpolation_files/figure-html/cell-17-output-1.png){width=558 height=411}\n:::\n:::\n\n\nDie Interpolation erfüllt immer die geforderte Bedingung $y(x_i) = y_i$. Jedoch führen Polynome mit einem hohen Grad oft zu nicht sinnvollen Ergebnissen. Es entstehen starke Überschwinger, welche mit zunehmendem Grad immer stärker werden. Eine alternative Interpolationsmethode stellen Splines dar, welche mehrere, niedrige Polynome zur Interpolation vieler Punkte verwenden.   \n\n",
    "supporting": [
      "interpolation_files"
    ],
    "filters": [],
    "includes": {}
  }
}