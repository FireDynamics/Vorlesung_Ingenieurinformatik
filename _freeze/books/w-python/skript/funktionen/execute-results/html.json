{
  "hash": "27c79486de9033ba3c0413602b8dd7a0",
  "result": {
    "engine": "jupyter",
    "markdown": "# Einf√ºhrung: Wiederverwendbarer Code mit Funktionen\n\nStellen Sie sich vor, Sie m√ºssen eine bestimmte Berechnung mehrfach im Programm durchf√ºhren. Anstatt den Code jedes Mal neu zu schreiben, k√∂nnen Sie ihn in einer **Funktion** b√ºndeln.\n\nFunktionen sind ein zentrales Werkzeug, um Code:\n- √ºbersichtlich,\n- wiederverwendbar und\n- testbar zu machen.\n\n## Lernziele dieses Kapitels\n\nAm Ende dieses Kapitels k√∂nnen Sie:\n- eigene Funktionen mit `def` erstellen,\n- Parameter √ºbergeben und R√ºckgabewerte nutzen,\n- Funktionen sinnvoll in Programmen einsetzen.\n\n## Eine Funktion definieren\n\nFunktionen werden mit `def` definiert und k√∂nnen beliebig oft aufgerufen werden:\n\n::: {#06d61496 .cell execution_count=1}\n``` {.python .cell-code}\ndef begruessung():\n    print(\"Hallo und willkommen!\")\n```\n:::\n\n\nSie wird erst ausgef√ºhrt, wenn Sie sie aufrufen:\n\n::: {#23d9fabd .cell execution_count=2}\n``` {.python .cell-code}\nbegruessung()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHallo und willkommen!\n```\n:::\n:::\n\n\n## Parameter √ºbergeben\n\nFunktionen k√∂nnen Eingabewerte (Parameter) erhalten:\n\n::: {#849112a1 .cell execution_count=3}\n``` {.python .cell-code}\ndef begruessung(name):\n    print(\"Hallo\", name + \"!\")\n\nbegruessung(\"Alex\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHallo Alex!\n```\n:::\n:::\n\n\n## R√ºckgabewerte mit `return`\n\nEine Funktion kann auch einen Wert **zur√ºckgeben**:\n\n::: {#a21ba91e .cell execution_count=4}\n``` {.python .cell-code}\ndef quadrat(zahl):\n    return zahl * zahl\n\nergebnis = quadrat(5)\nprint(ergebnis)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n25\n```\n:::\n:::\n\n\n## Weitere Beispiele: Umrechnungen\n\n### üí± Euro zu US-Dollar\n\n::: {#f954cff4 .cell execution_count=5}\n``` {.python .cell-code}\ndef euro_zu_usd(betrag_euro):\n    wechselkurs = 1.09\n    return betrag_euro * wechselkurs\n\nprint(\"20 ‚Ç¨ sind\", euro_zu_usd(20), \"US-Dollar.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n20 ‚Ç¨ sind 21.8 US-Dollar.\n```\n:::\n:::\n\n\n### üìè Zoll (inch) zu Zentimeter\n\n::: {#27153a0c .cell execution_count=6}\n``` {.python .cell-code}\ndef inch_zu_cm(inch):\n    return inch * 2.54\n\nprint(\"10 inch sind\", inch_zu_cm(10), \"cm.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10 inch sind 25.4 cm.\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## ‚úèÔ∏è Aufgabe: Begr√º√üung mit Name\n\nErstellen Sie eine Funktion `begruesse(name)`, die den Namen in einem Begr√º√üungstext verwendet:\n\n```text\nHallo Fatima, sch√∂n dich zu sehen!\n```\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## L√∂sung\n\n::: {#3d148a4b .cell execution_count=7}\n``` {.python .cell-code}\ndef begruesse(name):\n    print(\"Hallo\", name + \", sch√∂n dich zu sehen!\")\n\nbegruesse(\"Fatima\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHallo Fatima, sch√∂n dich zu sehen!\n```\n:::\n:::\n\n\n:::\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## ‚úèÔ∏è Aufgabe: Temperaturumrechnung\n\nSchreiben Sie eine Funktion, die Celsius in Fahrenheit umrechnet:\n\nFormel:\n\\[\nF = C \times 1.8 + 32\n\\]\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## L√∂sung\n\n::: {#376dddb3 .cell execution_count=8}\n``` {.python .cell-code}\ndef celsius_zu_fahrenheit(c):\n    return c * 1.8 + 32\n\nprint(celsius_zu_fahrenheit(20))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n68.0\n```\n:::\n:::\n\n\n:::\n:::\n\n## Parameter mit Standardwerten\n\nSie k√∂nnen Parametern **Standardwerte** zuweisen. So kann die Funktion auch ohne Angabe eines Werts aufgerufen werden:\n\n::: {#d3ce1d20 .cell execution_count=9}\n``` {.python .cell-code}\ndef begruessung(name=\"Gast\"):\n    print(\"Hallo\", name + \"!\")\n\nbegruessung()         # Hallo Gast!\nbegruessung(\"Maria\")  # Hallo Maria!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHallo Gast!\nHallo Maria!\n```\n:::\n:::\n\n\n## `print()` vs. `return`\n\nDiese beiden Begriffe werden oft verwechselt:\n\n| Ausdruck | Bedeutung |\n|----------|-----------|\n| `print(...)` | zeigt einen Text auf dem Bildschirm |\n| `return ...` | gibt einen Wert an den Aufrufer zur√ºck |\n\nBeispiel:\n\n::: {#3f70cc85 .cell execution_count=10}\n``` {.python .cell-code}\ndef verdoppeln(x):\n    return x * 2\n\n# Ausgabe sichtbar machen\nprint(verdoppeln(5))  # Ausgabe: 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\n## üîÑ Zusammenfassung: Aufbau einer Funktion\n\nEine Funktion besteht aus folgenden Teilen:\n\n1. **Definition** mit `def`\n2. **Funktionsname**\n3. **Parameter in Klammern (optional)**\n4. **Einr√ºckung** f√ºr den Funktionsk√∂rper\n5. (optional) **`return`-Anweisung**\n\nBeispiel:\n\n::: {#ef0dfe55 .cell execution_count=11}\n``` {.python .cell-code}\ndef hallo(name=\"Gast\"):\n    begruessung = \"Hallo \" + name + \"!\"\n    return begruessung\n```\n:::\n\n\n",
    "supporting": [
      "funktionen_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}