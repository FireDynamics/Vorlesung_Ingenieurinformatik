[
  {
    "objectID": "books/dataanalysis/interpolation.html",
    "href": "books/dataanalysis/interpolation.html",
    "title": "23  Interpolation – Lücken schließen",
    "section": "",
    "text": "23.1 Übersicht\nIn vielen praktischen Anwendungen werden Polynome als Basisfunktionen der Modellfunktion angenommen. Vorteile von Polynomen:\nEin Beispiel für eine Basis aus Polynomen:\n\\[ \\phi_1(x)=1,\\quad \\phi_2(x)=x,\\quad \\phi_3(x)=x^2,\\quad \\cdots,\\quad \\phi_m =x^{m-1} \\]",
    "crumbs": [
      "Working with data",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Interpolation – Lücken schließen</span>"
    ]
  },
  {
    "objectID": "books/dataanalysis/interpolation.html#übersicht",
    "href": "books/dataanalysis/interpolation.html#übersicht",
    "title": "23  Interpolation – Lücken schließen",
    "section": "",
    "text": "Polynome sind leicht zu differenzieren und integrieren\nAnnäherung von beliebigen Funktionen durch Polynome möglich, siehe Taylor-Entwicklung\nAuswertung ist sehr einfach und dadurch schnell, d.h. sie benötigt nur wenige schnelle arithmetische Operationen (Addition und Multiplikation)",
    "crumbs": [
      "Working with data",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Interpolation – Lücken schließen</span>"
    ]
  },
  {
    "objectID": "books/dataanalysis/interpolation.html#polynome",
    "href": "books/dataanalysis/interpolation.html#polynome",
    "title": "23  Interpolation – Lücken schließen",
    "section": "23.2 Polynome",
    "text": "23.2 Polynome\nPolynome \\(P(x)\\) sind Funktionen in Form einer Summe von Potenzfunktionen mit natürlichzahligen Exponenten ($ x^i, i $) mit den entsprechenden Koeffzienten \\(a_i\\):\n\\[ P(x) = \\sum_{i=0}^n a_i x^i = a_n x^n + a_{n-1} x^{n-1} + \\cdots + a_2 x^2 + a_1 x + a_0, \\quad i, n \\in \\mathbb{N}, a_i \\in \\mathbb{R} \\]\n\nAls Grad eines Polynoms wird der Term mit dem höchsten Exponenten und nichtverschwindenden Koeffizienten (der sogenannte Leitkoeffizient) bezeichnet.\nEin Polynom mit Grad \\(n\\) hat \\(n\\), teilweise komplexe, Nullstellen.\n\nIn Python, d.h. im numpy-Modul, werden Polynome durch ihre Koeffizienten representiert. Im Allgemeinen wird ein Polynom mit dem Grad \\(n\\) durch folgendes Array dargestellt\n[an, ..., a2, a1, a0]\nSo z.B. für \\(P(x) = x^3 + 5x^2 - 2x + 3\\):\n\nP = np.array([1, 5, -2, 3])\nprint(P)\n\n[ 1  5 -2  3]\n\n\nDie Auswertung des Polynoms an einem Punkt oder einem Array erfolgt mit der np.polyval-Funktion.\n\nx = 1\ny = np.polyval(P, x)\nprint(f\"P(x={x}) = {y}\")\n\nP(x=1) = 7\n\n\n\nx = np.array([-1, 0, 1])\ny = np.polyval(P, x)\nprint(f\"P(x={x}) = {y}\")\n\nP(x=[-1  0  1]) = [9 3 7]\n\n\nFür die graphische Darstellung im Bereich \\(x \\in [-6, 2]\\) können die bekannten numpy und matplotlib Funktionen verwendet werden.\n\nx = np.linspace(-6, 2, 50)\ny = np.polyval(P, x)\n\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y(x)')\nplt.grid()\n\n\n\n\n\n\n\n\nUm die Nullstellen eines Polynoms zu finden, kann die numpy-Funktion np.roots genutzt werden. Für das obige Polynom können folgende Nullstellen bestimmt werden.\n\nnstellen = np.roots(P)\n\n# direkte Ausgabe des Arrays\nprint(\"Nullstellen: \")\nprint(nstellen)\n\nNullstellen: \n[-5.46628038+0.j        0.23314019+0.703182j  0.23314019-0.703182j]\n\n\n\nprint(\"Nullstellen: \")\n# schönere Ausgabe des Arrays\nfor i, z in enumerate(nstellen):\n    if z.imag == 0:\n        print(f\"  x_{i+1} = {z.real:.2}\")\n    else:\n        print(f\"  x_{i+1} = {z.real:.2} {z.imag:+.2}i\")\n\nNullstellen: \n  x_1 = -5.5\n  x_2 = 0.23 +0.7i\n  x_3 = 0.23 -0.7i\n\n\nIn diesem Beispiel sind zwei der Nullstellen komplex. Eine komplexe Zahl \\(z\\) wird in Python als Summe des Realteils ($ Re\\() und Imaginärteils (\\) Im$). Letzterer wird durch ein nachfolgendes j, die imaginäre Einheit, gekennzeichnet.\n\\[ z = Re(z) + Im(z)j\\]\nDie Nullstellen können auch zur alternativen Darstellung des Polynoms verwendet werden. Sind \\(x_i\\) die \\(n\\) Nullstellen, so ist das Polynom \\(n\\)-ten Grades durch folgendes Produkt beschrieben:\n\\[ P(x) = \\prod_{i=1}^n \\left(x - x_i\\right) = (x - x_1)\\cdot (x - x_2) \\cdot \\cdots \\cdot (x - x_n) \\]\nSeien beispielsweise 1 und 2 die Nullstellen eines Polynoms, so lautet dieses:\n\\[  P(x) = (x - 1)(x - 2) = x^2 - 3x +2 \\]\nDie numpy-Funktion np.poly kann aus den Nullstellen die Polynomkoeffizienten bestimmen. Anhand des obigen Beispiels lautet der Funktionsaufruf:\n\nnstellen = [1, 2]\nkoeffizienten = np.poly(nstellen)\n\nprint(\"Nullstellen:\", nstellen)\nprint(\"Koeffizienten:\", koeffizienten)\n\nNullstellen: [1, 2]\nKoeffizienten: [ 1. -3.  2.]\n\n\nDas Modul numpy stellt viele praktische Funktionen zum Umgang mit Polynomen zur Verfügung. So existieren Funktionen um Polynome auszuwerten, die Nullstellen zu finden, zu addieren, zu multiplizieren, abzuleiten oder zu integrieren. Eine Übersicht ist in der numpy-Dokumentation gegeben.",
    "crumbs": [
      "Working with data",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Interpolation – Lücken schließen</span>"
    ]
  },
  {
    "objectID": "books/dataanalysis/interpolation.html#interpolation",
    "href": "books/dataanalysis/interpolation.html#interpolation",
    "title": "23  Interpolation – Lücken schließen",
    "section": "23.3 Interpolation",
    "text": "23.3 Interpolation\nInterpolation ist eine Methode, um Datenpunkte zwischen gegebenen Messpunkten zu konstruieren. Dazu wird eine Funktion gesucht, die alle Messpunkte exakt abbildet, was gleichbedeutend damit ist, dass die L2-Norm zwischen Funktion und Punkten Null ist.\nZwei Punkte können z.B. mit einer Geraden interpoliert werden. D.h. für zwei Messpunktpaare \\((x_1, y_1)\\) und \\((x_2, y_2)\\) mit \\(x_1\\neq x_2\\) existiert ein Koeffizientensatz, sodass die L2-Norm zwischen den Messpunkten und der Modellfunktion\n\\[y(x) = \\beta_1 x + \\beta_0\\]\nverschwindet.\n\n# Beispieldaten aus y(x) = -x + 2\n\nN = 50\ndx = 0.25\n\ndef fnk(x):\n    return -x + 2\n\nx = np.array([1, 2])\ny = fnk(x)\n\nplt.scatter(x, y, color='C1', label=\"Messpunkte\", zorder=3)\n\nx_modell = np.linspace(np.min(x), np.max(x), N)\nplt.plot(x_modell, fnk(x_modell), color='C0', label=\"Modellfunktion\")\n\nx_linie = np.linspace(np.min(x)-dx, np.max(x)+dx, N)\nplt.plot(x_linie, fnk(x_linie), '--', alpha=0.3, color='C0')\n\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.legend()\nplt.grid()\n\n\n\n\n\n\n\n\nFür drei Messpunkte muss ein Polynom zweiten Grades verwendet werden, um die Punkte exakt zu erfassen.\n\\[y(x) = \\beta_2 x^2 + \\beta_1 x + \\beta_0\\]\n\n# Beispieldaten aus y(x) = 3x^2 -4x - 1\n\nN = 50\ndx = 0.25\n\ndef fnk(x):\n    return 3*x**2-4*x - 1\n\nx = np.array([-1, 2, 3])\ny = fnk(x)\n\nplt.scatter(x, y, color='C1', label=\"Messpunkte\", zorder=3)\n\nx_modell = np.linspace(np.min(x), np.max(x), N)\nplt.plot(x_modell, fnk(x_modell), color='C0', label=\"Modellfunktion\")\n\nx_linie = np.linspace(np.min(x)-dx, np.max(x)+dx, N)\nplt.plot(x_linie, fnk(x_linie), '--', alpha=0.3, color='C0')\n\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.legend()\nplt.grid()\n\n\n\n\n\n\n\n\nDies kann verallgemeinert werden: \\(n\\) Messpunkte können exakt mit einem Polynom ($ n-1$)-ten Grades abgebildet werden. Die Suche nach den passenden Koeffizienten ist das Lagrangesche Interpolationsproblem. Für das gesuchte Polynom \\(P(x)\\) gilt:\n\\[  P(x_i) = y_i \\quad i \\in 1, \\dots, n \\]\nDie Existenz und Eindeutigkeit eines solchen Polynoms kann gezeigt werden. Das gesuchte Polynom lautet:\n\\[  P(x) = \\sum_{i=1}^n y_i I_i(x) \\] \\[  \\text{mit}\\quad I_i(x) = \\prod_{j=1, i\\neq j}^n \\frac{x-x_j}{x_i - x_j} \\]\nAlternativ kann auch ein Gleichungssystem, welches durch die Polynomialbasis \\(\\phi_i(x)\\) gegeben ist, gelöst werden. Für die \\(n\\) Punktepaare gilt jeweils:\n\\[  y(x_i) = \\sum_{i=1}^{m}\\beta_i \\cdot \\phi_i(x_i) = \\beta_1\\cdot \\phi_1(x_i) + \\cdots + \\beta_m\\cdot \\phi_m(x_i) = y_i \\]\nDas allgemeine Geleichungssystem lautet\n\\[  \\left( \\begin{matrix} \\phi_1(x_1) & \\phi_2(x_1) & \\cdots & \\phi_m(x_1) \\\\\n             \\phi_1(x_2) & \\phi_2(x_2) & \\cdots & \\phi_m(x_2) \\\\\n             \\vdots &\\vdots & \\ddots & \\vdots \\\\\n             \\phi_1(x_n) & \\phi_2(x_n) & \\cdots & \\phi_m(x_n) \\\\\n             \\end{matrix}\\right).\n\\left(  \\begin{matrix} \\beta_1 \\\\  \n      \\beta_2 \\\\   \\vdots \\\\   \\beta_m \\\\\n      \\end{matrix} \\right)\n= \\left(  \\begin{matrix} y_1 \\\\  y_2 \\\\   \\vdots \\\\   y_n \\\\ \\end{matrix} \\right) \\]\nund mit der Polynomialbasis\n\\[ \\underbrace{\\left( \\begin{matrix} 1 & x_1 & \\cdots & x_1^{n-1} \\\\ 1 & x_2 & \\cdots & x_2^{n-1} \\\\ \\vdots &\\vdots & \\ddots & \\vdots \\\\ 1 & x_n & \\cdots & x_n^{n-1} \\\\ \\end{matrix}\\right)}_{V}. \\left(  \\begin{matrix} \\beta_1 \\\\  \\beta_2 \\\\   \\vdots \\\\   \\beta_m \\\\ \\end{matrix} \\right) = \\left(  \\begin{matrix} y_1 \\\\  y_2 \\\\   \\vdots \\\\   y_n \\\\ \\end{matrix} \\right)\\]\nDie Matrix \\(V\\) heisst Vandermonde-Matrix und kann exakt gelöst werden, für \\(m=n\\) und wenn für alle \\(i, j, i\\neq j\\) gilt \\(x_i \\neq x_j\\).\nIn Python kann das Interpolationsproblem mit der Funktion np.polyfit gelöst werden. Das folgende Beispiel demonstriert deren Anwendung.\nDie Messtellen folgen in dem Beispiel der Funktion \\(f(x)\\), welche nur zur Generierung der Datenpunkte verwendet wird.\n\\[ f(x) = \\frac{1}{2} + \\frac{1}{1+x^2}\\]\nZunächst werden die Messpunkte generiert.\n\ndef fnk(x):\n    return 0.5 + 1/(1+x**2)\n\n\nxmin = -5\nxmax =  5\nx = np.linspace(xmin, xmax, 100)\ny = fnk(x)\n\n\nn = 5\nxi = np.linspace(xmin, xmax, n)\nyi = fnk(xi)\n\nNun folgt die Interpolation für 5 und 15 Messpunkte.\n\nP = np.polyfit(xi, yi, n-1)\nprint(\"Interpolationskoeffizienten:\")\nprint(P)\n\nInterpolationskoeffizienten:\n[ 5.30503979e-03  4.23767299e-17 -1.71087533e-01  7.45353051e-16\n  1.50000000e+00]\n\n\n\nplt.plot(x, y, color='C0', alpha=0.5, label='generierende Funktion')\nplt.plot(x, np.polyval(P, x), color='C2', label='Interpolation')\nplt.scatter(xi, yi, color='C1', label='Messpunkte', zorder=3)\nplt.legend()\nplt.grid()\n\n\n\n\n\n\n\n\n\nn = 15\nxi = np.linspace(xmin, xmax, n)\nyi = fnk(xi)\n\nP = np.polyfit(xi, yi, n-1)\n\nplt.plot(x, y, color='C0', alpha=0.5, label='generierende Funktion')\nplt.plot(x, np.polyval(P, x), color='C2', label='Interpolation')\nplt.scatter(xi, yi, color='C1', label='Messpunkte', zorder=3)\nplt.legend()\nplt.grid()\n\n\n\n\n\n\n\n\nDie Interpolation erfüllt immer die geforderte Bedingung \\(y(x_i) = y_i\\). Jedoch führen Polynome mit einem hohen Grad oft zu nicht sinnvollen Ergebnissen. Es entstehen starke Überschwinger, welche mit zunehmendem Grad immer stärker werden. Eine alternative Interpolationsmethode stellen Splines dar, welche mehrere, niedrige Polynome zur Interpolation vieler Punkte verwenden.",
    "crumbs": [
      "Working with data",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Interpolation – Lücken schließen</span>"
    ]
  }
]